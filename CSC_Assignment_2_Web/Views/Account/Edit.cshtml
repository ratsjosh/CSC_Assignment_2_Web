@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .under {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 1;
    }

    .over {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 1;
        opacity: 0.65;
        visibility: hidden;
    }

    #editform .form-control {
        min-width: 100% !important;
    }

    .StripeElement {
        background-color: white;
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid transparent;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
    body {
        margin-top: 20px;
    }

    .panel {
        text-align: center;
    }

        .panel:hover {
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.4), 0 1px 5px rgba(130, 130, 130, 0.35);
        }

    .panel-body {
        padding: 0px;
        text-align: center;
    }

    .the-price {
        background-color: rgba(220,220,220,.17);
        box-shadow: 0 1px 0 #dcdcdc, inset 0 1px 0 #fff;
        padding: 20px;
        margin: 0;
    }

        .the-price h1 {
            line-height: 1em;
            padding: 0;
            margin: 0;
        }

    .subscript {
        font-size: 25px;
    }

    /* CSS-only ribbon styles    */
    .cnrflash {
        /*Position correctly within container*/
        position: absolute;
        top: -9px;
        right: 4px;
        z-index: 1; /*Set overflow to hidden, to mask inner square*/
        overflow: hidden; /*Set size and add subtle rounding  		to soften edges*/
        width: 100px;
        height: 100px;
        border-radius: 3px 5px 3px 0;
    }

    .cnrflash-inner {
        /*Set position, make larger then 			container and rotate 45 degrees*/
        position: absolute;
        bottom: 0;
        right: 0;
        width: 145px;
        height: 145px;
        -ms-transform: rotate(45deg); /* IE 9 */
        -o-transform: rotate(45deg); /* Opera */
        -moz-transform: rotate(45deg); /* Firefox */
        -webkit-transform: rotate(45deg); /* Safari and Chrome */
        -webkit-transform-origin: 100% 100%; /*Purely decorative effects to add texture and stuff*/ /* Safari and Chrome */
        -ms-transform-origin: 100% 100%; /* IE 9 */
        -o-transform-origin: 100% 100%; /* Opera */
        -moz-transform-origin: 100% 100%; /* Firefox */
        background-image: linear-gradient(90deg, transparent 50%, rgba(255,255,255,.1) 50%), linear-gradient(0deg, transparent 0%, rgba(1,1,1,.2) 50%);
        background-size: 4px,auto, auto,auto;
        background-color: #aa0101;
        box-shadow: 0 3px 3px 0 rgba(1,1,1,.5), 0 1px 0 0 rgba(1,1,1,.5), inset 0 -1px 8px 0 rgba(255,255,255,.3), inset 0 -1px 0 0 rgba(255,255,255,.2);
    }

        .cnrflash-inner:before, .cnrflash-inner:after {
            /*Use the border triangle trick to make  				it look like the ribbon wraps round it's 				container*/
            content: " ";
            display: block;
            position: absolute;
            bottom: -16px;
            width: 0;
            height: 0;
            border: 8px solid #800000;
        }

        .cnrflash-inner:before {
            left: 1px;
            border-bottom-color: transparent;
            border-right-color: transparent;
        }

        .cnrflash-inner:after {
            right: 0;
            border-bottom-color: transparent;
            border-left-color: transparent;
        }

    .cnrflash-label {
        /*Make the label look nice*/
        position: absolute;
        bottom: 0;
        left: 0;
        display: block;
        width: 100%;
        padding-bottom: 5px;
        color: #fff;
        text-shadow: 0 1px 1px rgba(1,1,1,.8);
        font-size: 0.95em;
        font-weight: bold;
        text-align: center;
    }

</style>

<div class="container">
    <h1>Edit Profile</h1>
    <hr>
    <div class="row">
        <!-- left column -->
        <div class="col-md-3">
            <div class="text-center">
                <img width="200" height="200" class="under avatar img-circle" id="ProfilePic" style="cursor: pointer;" alt="avatar" src="//placehold.it/200" onclick="$('#myInput').click();">
                <img id="loading" width="200" height="200" class="over avatar img-circle" style="cursor: pointer;" alt="avatar" src="~/images/loading.gif">
                <input id="myInput" class="form-control" style="visibility:hidden" type="file">
            </div>
        </div>
        <!-- edit form column -->
        <div class="col-md-9 personal-info">
            <div class="row">
                <div class="col-lg-12">
                    <h3>Subscription Status</h3>
                    <label id="status" style="font-size:larger;"></label>
                    <br />
                    <button class="btn btn-primary" id="upgrade">Upgrade</button>
                    <button class="btn btn-danger" id="unsubscribe">Unsubscribe</button>

                    <h3>Personal info</h3>
                    <form id="editform" method="post" class="form-horizontal" role="form">
                        <div class="form-group">
                            <label class="col-lg-3 control-label">Name:</label>
                            <div class="col-lg-8">
                                <input class="form-control" type="text" id="name">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-lg-3 control-label">Email:</label>
                            <div class="col-lg-8">
                                <input class="form-control" type="text" id="email">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Reknown:</label>
                            <div class="col-md-8">
                                <input class="form-control" type="text" id="reknown">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Biography:</label>
                            <div class="col-md-8">
                                <textarea rows="8" class="form-control" id="bio" placeholder="Biography"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label"></label>
                            <div class="col-md-8">
                                <input class="btn btn-success" id="btnSaveChanges" type="button" value="Save Changes">
                                <span></span>
                            </div>
                        </div>
                    </form>
                    <form method="post" class="form-horizontal" role="form">
                        <h4>Reset Password</h4>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Old password:</label>
                            <div class="col-md-3">
                                <input id="oldPassword" class="form-control" type="password">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">New password:</label>
                            <div class="col-md-3">
                                <input id="newPassword" class="form-control" type="password">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Confirm password:</label>
                            <div class="col-md-3">
                                <input id="confirmPassword" class="form-control" type="password">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-3 control-label"></label>
                            <div class="col-md-8">
                                <input class="btn btn-primary" type="button" value="Change Password">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var userId = getParameterByName('id');
    var plans;
    getActivePlans();
    var currentPlan = null;
    var hasId = false;
    $(document).ready(function () {
        var nameInput = $("#name");
        var emailInput = $("#email");
        var reknownInput = $("#reknown");
        var bioInput = $("#bio");
        var oldPasswordInput = $('#oldPassword');
        var profilePic = $('#ProfilePic');
        var subscriptionStatus = $('#status');
        $('#unsubscribe').hide();

        var user = getLogInUser(userId, accessToken, function (user) {
            if (user == null)
                alert("user undefined");
            else {
                nameInput.val(user.name);
                emailInput.val(user.email);
                reknownInput.val(user.reknown);
                bioInput.val(user.bio);
                profilePic.attr('src', user.profilePictureImage);
                if (user.stripeToken == null) {
                    subscriptionStatus.append("Free");
                    $('#unsubscribe').hide();
                    hasId = false;
                } else { 
                    hasId = true;
                    $.ajax({
                        url: properties.hostConnectionString + '/Account/getSubscription',
                        method: 'GET',
                        contentType: "application/x-www-form-urlencoded; charset=utf-8",
                        crossDomain: true,
                        headers: {
                            'Authorization': 'Bearer '
                            + accessToken
                        },
                        data: {
                            userId: userId
                        },
                        success: function (response) {
                            if (response != undefined) {
                                currentPlan = response;
                                subscriptionStatus.append(response.name)
                                $('#unsubscribe').show();
                                escapeLoading();

                            } else { 
                                currentPlan = null;
                                subscriptionStatus.append("Free");
                                $('#unsubscribe').hide();
                                escapeLoading();

                            }

                        },
                        error: function (jqXHR) {
                            currentPlan = null;
                            subscriptionStatus.append("Free");
                            $('#unsubscribe').hide();
                            escapeLoading();

                        }
                    });

                }
            }
        });
        $('#btnSaveChanges').click(function () {
            let user = {
                Id: userId,
                Name: nameInput.val(),
                Email: emailInput.val(),
                Reknown: reknownInput.val(),
                Bio: bioInput.val()
            }
            editUser(userId, user, function (responseData, textStatus, jqXHR) {
                if (textStatus == "success") {
                    swal({
                        title: 'Success',
                        text: responseData.message,
                        timer: 1500,
                        type: 'success'
                    }).then(
                        function () {
                            window.location.href = "/Account/Edit?id=" + userId;
                        },
                        // handling the promise rejection
                        function (dismiss) {
                            if (dismiss === 'timer') {
                                window.location.href = "/Account/Edit?id=" + userId;
                            }
                        });
                }
                else {
                    swal({
                        title: 'Error',
                        text: "Failed to edit user!",
                        timer: 1500,
                        type: 'error'
                    }).then(
                        function () {
                            window.location.href = "/Account/Edit?id=" + userId;
                        },
                        // handling the promise rejection
                        function (dismiss) {
                            if (dismiss === 'timer') {
                                window.location.href = "/Account/Edit?id=" + userId;
                            }
                        });
                }
            });
        });
    });
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#ProfilePic').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }
    var result = "";
    function getBase64(file) {
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function () {
            result = reader.result.split(',').pop();
            postPicture(result);

        };
        reader.onerror = function (error) {
            console.log('Error: ', error);
            imageError();
        };
    }

    function imageError() {
        $('#loading').css("visibility", "visible");
        $('#loading').attr('src', "/images/error.jpg");
    }

    $("#myInput").change(function () {
        if (this.files.length > 0) {
            readURL(this);
            $('#loading').css("visibility", "visible");
            //imageError();

            getBase64(this.files[0]);
        }
    });

    function postPicture(base64String) {

        $.ajax({
            // Post username, password & the grant type to /token
            url: properties.hostConnectionString + '/Account/UploadProfilePicAsync',
            method: 'POST',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            crossDomain: true,
            headers: {
                'Authorization': 'Bearer '
                + accessToken
            },
            data: {
                ImageBase64: base64String,
                Id: userId
            },
            success: function (response) {
                console.dir(response)
                if (response != null) {
                    $('#ProfilePic').attr('src', response);
                    $('#loading').css("visibility", "hidden");
                }
            },
            error: function (jqXHR) {
                imageError();
            }
        });
    }

    function getActivePlans() {

        $.ajax({
            // Post username, password & the grant type to /token
            url: properties.hostConnectionString + '/Account/GetAllActiveSubscription',
            method: 'get',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            crossDomain: true,
            headers: {
                'Authorization': 'Bearer '
                + accessToken
            },
            success: function (response) {
                console.dir(response)
                plans = response;
            },
            error: function (jqXHR) {
                plans = null;
            }
        });
    }

    $('#unsubscribe').click(function () {
        swal({
            title: "Summary",
            html: 'Are you sure you want to unsubscribe?',
            showCancelButton: true,
            showConfirmButton: true
        }).then(function () {
            loadingSwal();
            $.ajax({
                // Post username, password & the grant type to /token
                url: properties.hostConnectionString + '/Account/UnsubscribeAccountAsync',
                method: 'PUT',
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                crossDomain: true,
                headers: {
                    'Authorization': 'Bearer '
                    + accessToken
                },
                data: {
                    userId: userId
                },
                success: function (response) {
                    swal(
                        'Success!',
                        'Your plan has been changed!',
                        'success'
                        ).then(function () {window.location.reload()})

                },
                error: function (jqXHR) {
                    swal(
                        'Error!',
                        'Something went wrong!',
                        'error'
                        ).then(function () {window.location.reload()})

                }
            });
        });
    })

    function enterCard(planId) { 
        swal({
            html:
            '<form action="/charge" method="post" id="payment-form">' +
            '<div class="form-row" >' +
            '<label for="card-element">Credit or debit card</label>' +
            '<div id="card-element"></div><br/>' +
            '<div id="card-errors" role="alert"></div>' +
            '</div ><br/><button id="btnUpgrade" class="btn btn-primary">Upgrade</button></form >',
            allowOutsideClick: false,
            showCloseButton: false,
            showCancelButton: true,
            showConfirmButton: false
        });

        var elements = stripe.elements();
        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
        var style = {
            base: {
                color: '#32325d',
                lineHeight: '24px',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create an instance of the card Element
        var card = elements.create('card', { style: style });

        // Add an instance of the card Element into the `card-element` <div>
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();
            $(".swal2-cancel").hide();
            $('#btnUpgrade').empty();
            $('#btnUpgrade').append('<i class="fa fa- refresh fa- spin"></i>Loading');
            $('#btnUpgrade').prop("disabled", true);
            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    // Inform the user if there was an error
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                    $(".swal2-cancel").show();
                    $('#btnUpgrade').empty();
                    $('#btnUpgrade').append('Upgrade');
                    $('#btnUpgrade').prop("disabled", false);
                } else {
                    // Send the token to your server
                    console.log(result.token);
                    summaryPopUp(planId, result.token);
                }
            });
        });
    }

    function summaryPopUp(planId, tokenId) { 
        console.log(tokenId);

        var htmlPut = "";
        plans.forEach(function (element) {
            console.dir(element);
            var price = (element.amount / 100);
            var name = element.name;
            var interval = element.interval;
            var currency = element.currency;
            var id = element.id;
            if (id == planId) {
                htmlPut = name + ' Plan for ' + currency + ' $' + price + ' per ' + interval;
            }
        });
        event.preventDefault();

        swal({
            title: "Summary",
            html: 'You have chosen the ' + htmlPut + '</br>Are you sure you want this plan?',
            showCancelButton: true,
            showConfirmButton: true
        }).then(function () {
            loadingSwal();
            if (currentPlan != null) {
                $.ajax({
                    url: properties.hostConnectionString + '/Account/ChangeAccountSubscribeAsync',
                    method: 'PUT',
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    crossDomain: true,
                    headers: {
                        'Authorization': 'Bearer '
                        + accessToken
                    },
                    data: {
                        planId: planId,
                        userId: userId
                    },
                    success: function (response) {
                        swal(
                            'Success!',
                            'Your plan has been upgraded!',
                            'success'
                        ).then(function () {window.location.reload()})

                    },
                    error: function (jqXHR) {
                        swal(
                            'Error!',
                            'Something went wrong!',
                            'error'
                        ).then(function () {window.location.reload()})

                    }
                });
            } else { 
                $.ajax({
                    url: properties.hostConnectionString + '/Account/AccountSubscribeAsync',
                    method: 'POST',
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    crossDomain: true,
                    headers: {
                        'Authorization': 'Bearer '
                        + accessToken
                    },
                    data: {
                        tokenId: tokenId.id,
                        planId: planId,
                        userId: userId
                    },
                    success: function (response) {
                        swal(
                            'Success!',
                            'Your plan has been upgraded!',
                            'success'
                        ).then(function () {window.location.reload()})

                    },
                    error: function (jqXHR) {
                        swal(
                            'Error!',
                            'Something went wrong!',
                            'error'
                        ).then(function () {window.location.reload()})

                    }
                });

            }
        })
    }

    function loadingSwal() { 
        event.preventDefault();

        swal({
            imageUrl: '/images/loading.gif',
            showCloseButton: false,
            showCancelButton: false,
            showConfirmButton: false,
            allowOutsideClick: false
        });
    }

    function choosePlan() { 
        var htmlToPut = "";
        var AvailablePlans = null;

        if (currentPlan != null) {
            AvailablePlans = plans.filter(function (el) {
                return el.name !== currentPlan.name;
            });
        } else { 
            AvailablePlans = plans;
        }

        AvailablePlans.forEach(function (element) {
            console.dir(element);
            var price = (element.amount / 100);
            var name = element.name;
            var interval = element.interval;
            var currency = element.currency;
            var id = element.id;
            htmlToPut += '<div class="col-xs-12 col-md-3">' +
                '<div class="panel panel-primary">' +
                '<div class="panel-heading">' +
                '<h3 class="panel-title">' + name + '</h3>' +
                '</div>' +
                '<div class="panel-body">' +
                '<div class="the-price">' +
                '<h1>' + currency + ' $' + price + '<span class="subscript"> per ' + interval + '</span></h1>' +
                '</div></div><div class="panel-footer">' +
                '<button class="btn btn-primary planBtn" data-id="'+id+'">Select</button></div ></div></div>'
        });
        var FormWidth = 300 * AvailablePlans.length;
        swal({
            width: FormWidth,
            padding: 10,
            html: '<div class="container"><div class="row">' + htmlToPut + '</div></div>',
            showCloseButton: false,
            showCancelButton: false,
            showConfirmButton: false
        });


        $('.planBtn').click(function () {
            if (hasId) {
                summaryPopUp($(this).data("id"), "");
            } else {
                enterCard($(this).data("id"));
            }
        });       
    }

    $('#upgrade').click(function () {
        choosePlan();
    });


</script>