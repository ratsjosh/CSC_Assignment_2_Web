@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .gallery_product {
        margin: 10px;
        padding-top: 15px;
        padding-bottom: 15px;
        min-height: 200px;
        min-width: 200px;
        height: 200px;
        width: 200px;
        border-style: solid;
    }

    .imageSize {
        min-height: 100%;
        min-width: 100%;
        height: 100%;
        width: 100%;
    }
</style>
<link href="~/css/dropzone.css" rel="stylesheet" />
<script src="~/js/dropzone.js"></script>
<div class="container">
    <h1>Gallery</h1>
    <hr>
    <button id="submit-all">Submit all files</button>
    <form action="/target" class="dropzone" id="my-dropzone"></form>
    <hr>
    <div id="GallaryPlace" class="row">
        <h2>No image!</h2>
    </div>
</div>
<script>
    var userId = getParameterByName('id');
    var place = $('#GallaryPlace');
    var uploadFile = 1;
    Dropzone.options.myDropzone = {

        // Prevents Dropzone from uploading dropped files immediately
        autoProcessQueue: false,
        parallelUploads: 100,
        init: function () {
            var submitButton = document.querySelector("#submit-all")
            myDropzone = this; // closure

            submitButton.addEventListener("click", function () {
                myDropzone.processQueue(); // Tell Dropzone to process all queued files.
            });

            this.on("processing", function (file) {
                this.options.url = properties.hostConnectionString + '/Image/UploadMultiplePicAsync';
            });

            this.on("sending", function (file, xhr, formData) {
                xhr.setRequestHeader("Authorization", 'Bearer '+ accessToken);
                xhr.setRequestHeader("UserId", userId);
                // add headers with xhr.setRequestHeader() or
                // form data with formData.append(name, value);
            });
            // You might want to show the submit button only when 
            // files are dropped here:
            this.on("addedfile", function () {
                // Show submit button here and/or inform user to click it.
            });

            this.on("removedfile", function () {
                // Show submit button here and/or inform user to click it.

            });

            this.on('success', function (file, response) {
                var args = Array.prototype.slice.call(arguments);

                // Look at the output in you browser console, if there is something interesting
                place.prepend('<div class="gallery_product col-lg-4 col-md-4 col-sm-4 col-xs-6">' + '<img class="imageSize" src= "' + response.imageURL + '" class="img-responsive" >' + '</div>');
                this.removeFile(file);
            });


        }
    };
    $(document).ready(function () {

        $.ajax({
            url: properties.hostConnectionString + '/Image/GetAllImage?userId=' + userId,
            type: 'GET',
            async: true,
            crossDomain: true,
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            headers: {
                'Authorization': 'Bearer '
                + accessToken
            },
            success: function (responseData, textStatus, jqXHR) {
                set(responseData);

            },
            error: function (responseData, textStatus, jqXHR) {
                error(textStatus);

            }
        });

    });
    function set(response) {
        place.html("");
        console.dir(response);
        for (var x = 0; x < response.length; x++) {
            place.append('<div class="gallery_product col-lg-4 col-md-4 col-sm-4 col-xs-6">' +'<img class="imageSize" src= "' + response[x] + '" class="img-responsive" >'+'</div>');
        }
        escapeLoading();
    }
    function error(error) { 
        console.dir(error);
    }

     

</script>